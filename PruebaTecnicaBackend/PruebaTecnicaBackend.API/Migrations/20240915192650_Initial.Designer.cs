// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaTecnicaBackend.API.Data;

#nullable disable

namespace PruebaTecnicaBackend.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240915192650_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f1b7f09-ff9e-4639-9d32-bff802063f9a"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 19, 26, 50, 271, DateTimeKind.Utc).AddTicks(3508),
                            Name = "Sin rol"
                        },
                        new
                        {
                            Id = new Guid("d999ea19-9854-48a5-8f9b-269b77a56241"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 19, 26, 50, 271, DateTimeKind.Utc).AddTicks(3512),
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = new Guid("41af8624-e1cb-49f3-90b7-4dc79f20cbff"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 19, 26, 50, 271, DateTimeKind.Utc).AddTicks(3513),
                            Name = "Empleado"
                        },
                        new
                        {
                            Id = new Guid("b4587c4b-22f8-4425-ad10-1ac455b3303e"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 19, 26, 50, 271, DateTimeKind.Utc).AddTicks(3515),
                            Name = "Administrador"
                        });
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserEntity", b =>
                {
                    b.HasOne("PruebaTecnicaBackend.API.Data.Entities.UserRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserTaskEntity", b =>
                {
                    b.HasOne("PruebaTecnicaBackend.API.Data.Entities.UserEntity", "User")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("AssignedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}

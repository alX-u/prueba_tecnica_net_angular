// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaTecnicaBackend.API.Data;

#nullable disable

namespace PruebaTecnicaBackend.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240915051401_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf246c83-ccab-4151-9760-c86a3f1ea971"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 5, 14, 1, 93, DateTimeKind.Utc).AddTicks(4578),
                            Name = "Sin rol"
                        },
                        new
                        {
                            Id = new Guid("f266e609-aa2d-48db-ac2b-e79a8e96a6ea"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 5, 14, 1, 93, DateTimeKind.Utc).AddTicks(4581),
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = new Guid("21d6bfeb-676f-4582-a11c-a8b265d3c0d2"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 5, 14, 1, 93, DateTimeKind.Utc).AddTicks(4582),
                            Name = "Empleado"
                        },
                        new
                        {
                            Id = new Guid("6ba2d67b-8e13-48c3-9386-43e3d4bc22e7"),
                            CreatedDateTime = new DateTime(2024, 9, 15, 5, 14, 1, 93, DateTimeKind.Utc).AddTicks(4583),
                            Name = "Administrador"
                        });
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserEntity", b =>
                {
                    b.HasOne("PruebaTecnicaBackend.API.Data.Entities.UserRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserTaskEntity", b =>
                {
                    b.HasOne("PruebaTecnicaBackend.API.Data.Entities.UserEntity", "User")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PruebaTecnicaBackend.API.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("AssignedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
